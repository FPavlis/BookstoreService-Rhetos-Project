Module Bookstore
{
    AutoDetectSqlDependencies;

    Polymorphic SalesItem
    {
        ShortString Code;
        Money Price;
        ShortString Description;
    }

    Entity Food 
    {
        ShortString Code {AutoCode; DefaultValue 'item => "F+++"';}
        Money Price {Required;}
        ShortString Description;
        Integer Calories;

        Is Bookstore.SalesItem;
    }

    Entity Book
    {
        ShortString Code { AutoCode; DefaultValue 'item => "BOOK+++"'; DenyUserEdit; }
        Money Price;
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;
        Deactivatable { DeactivateOnDelete; }
        MonitoredRecord Records;
        
        Is Bookstore.SalesItem
        {
            Implements Bookstore.SalesItem.Description "Title + ISNULL (', ' + (SELECT Name FROM Bookstore.Person WHERE ID = Bookstore.Book.AuthorID), '')";

            WHERE 'Price IS NOT NULL';
        }

        ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

        ComposableFilterBy LongBooks2 '(query, repository, parameter)=>
        {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

        ComposableFilterBy LongBooks3 '(query, repository, parameter) => 
        {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if(parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

        ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
        InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity". Please use "curiosity" instead.';

        ItemFilter ForeignAuthorXWithChapters 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Chapter.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';

        FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';

        ComposableFilterBy 'System.String[]' '(query, repository, titles) =>
        {
             return query.Where(book => titles.Contains(book.Title));
        }';

         ComposableFilterBy 'Bookstore.Person' '(query, repository, author) =>
         {
             return query.Where(book => book.AuthorID == author.ID
                 || book.Author.Name == author.Name);
         }';
    }

    Parameter LongBooks2 {}

    Parameter LongBooks3 
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Browse SalesItemGrid Bookstore.SalesItem
    {
        Take Code;
        Take Price;
        Take 'Book.NumberOfPages';
    }

    Entity SalesItemComment
    {
        Reference SalesItem { Detail; }
        LongString Comment;
    }

    Entity Disposal
    {
        Reference Book { Required; }
        LongString Explanation { Required; }
        DateTime EffectiveSince { CreationTime; }

        ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
        InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.'
        {
            MarkProperty Bookstore.Disposal.Explanation;
            ErrorMetadata 'Severity' 'Low';
        }

        ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
        InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';

    }



    Entity BookRating
    {
        Extends Bookstore.Book;
        Decimal Rating; // ComputedFrom Bookstore.ComputeBookRating
    }

    Entity Person
    {
        ShortString Name;
    }



    Entity Chapter
    {
        Reference Book { Detail; }
        LongString Heading;


    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }

        ItemFilter ContainsLockMark 'item => item.Name.Contains("lock")';
		Lock ContainsLockMark '[Test] Name contains lock mark.';
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        ShortString Name;
        Integer VAT { Unique; Required; }
        ShortString Code { RegExMatch "\d{7,10}" "Code must have 7 to 10 digits."; }
        Integer TestPeriod { MinValue 1; MaxValue 12; }
        ShortString Iban { Required; Unique; MinLength 21; MaxLength 21; }
        PhoneNumber PrimaryPhoneNumber;

        DateTime WorkStarted { Required; }
        DateTime WorkFinished;

        ItemFilter workDidntStart 'item => item.WorkStarted == null';
		LockProperty WorkFinished.workDidntStart 'WorkFinished is locked if WorkStarted didnt start.';

        ItemFilter FinishBeforeStart 'employee => employee.WorkFinished != null && employee.WorkFinished.Value < employee.WorkStarted.Value';
        InvalidData FinishBeforeStart 'It is not allowed to enter a WorkFinished time before the WorkStarted time.';
    }

    Entity Manager
    {
        Extends Bookstore.Employee;

        LongString Bonuses;
    }

    Entity EducationalRecord
    {
        Date DateOfRecord;
        LongString Description;
        Deactivatable;

        DateTime Created { CreationTime; }

        Reference Employee{ Detail; }

        Logging { AllProperties; }
    }

    Entity Department
    {
        ShortString Code { Unique; Required; }
        LongString Description;

        DateTime Modified { ModificationTimeOf Bookstore.Department.Code; }
    }

    Entity EmployeeDepartment
    {
        Reference Employee {Detail;}
        Reference Department {Required;}

        UniqueMultiple 'Employee Department';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
        Take NumberOfChapters 'Extension_BookInfo.NumberOfChapters'; 
    }

    Browse BookList Bookstore.Book
    {
        Take Title;
        Take 'Author.Name';
        Take NumberOfTopics 'Extension_AllBookTopics.NumberOfTopics';
    }

    SqlQueryable BookInfo <SQL\BookInfo.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfChapters;

        AutodetectSqlDependencies;
    }

    SqlQueryable AllBookTopics <SQL\AllBookTopics.sql>
    {
        Extends Bookstore.Book;
        Integer NumberOfTopics;
        ShortString Title;

        AutodetectSqlDependencies;
    }

    Computed ExpectedBookRating 'repository =>
            {
                var books = repository.Bookstore.Book.Query()
                    .Select(b =>
                        new
                        {
                            b.ID,
                            b.Title,
                            IsForeign = b.Extension_ForeignBook.ID != null
                        })
                    .ToList();

                var ratings = new List<ExpectedBookRating>();
                foreach (var book in books)
                {
                    decimal rating = 0;

                    if (book.Title?.IndexOf("super", StringComparison.InvariantCultureIgnoreCase) >= 0)
                        rating += 100;

                    if (book.Title?.IndexOf("great", StringComparison.InvariantCultureIgnoreCase) >= 0)
                        rating += 50;

                    if (book.IsForeign)
                        rating *= 1.2m;

                    ratings.Add(new ExpectedBookRating { ID = book.ID, Rating = rating });
                }

                return ratings.ToArray();
            }'
        {
            Extends Bookstore.Book;
            Decimal Rating;
        }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Action Insert5Books
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < 5; i++)
            {
                var newBook = new Bookstore.Book { Code = "+++", Title = "New book" };
                repository.Bookstore.Book.Insert(newBook);
            }
        }';

    Action InsertManyBooks
        '(parameter, repository, userInfo) =>
        {
            for (int i = 0; i < parameter.NumberOfBooks; i++)
            {
                string newTitle = parameter.TitlePrefix + " - " + (i + 1);
                var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
    {
        Integer NumberOfBooks;
        ShortString TitlePrefix;
    }

    Action InsertRandomBook
        '(parameter, repository, userInfo) => Bookstore.Service.RandomBookGenerator.InsertBooks(repository, parameter.NumberOfBooks)'
        {
            Integer NumberOfBooks;
        }

    Action InsertSpecificBooks
        '(parameter, repository, userInfo) =>
        {
            for(int i=0; i < parameter.NumberOfBooks; i++){
                
                var newBook = new Bookstore.Book { Title = parameter.Title };
                repository.Bookstore.Book.Insert(newBook);
            }
        }'
    {
        Integer NumberOfBooks;
        ShortString Title;
    }

    SqlView AllAuthors <SQL\AllAuthors.sql>{
        SqlDependsOn Bookstore.Person;
        AutodetectSqlDependencies;
    }

    SqlQueryable AllBookAuthors <SQL\AllAuthors.sql>
    {
        Extends Bookstore.Person;
        ShortString Name;

        AutodetectSqlDependencies;
    }

    Entity NumberOfReviews
    {
        Extends Bookstore.Book;
        Integer Count;
    }

     Entity Review
    {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;

        SaveMethod
        {
            Initialization DefaultTextFromScore
                ' 
                    foreach(var item in insertedNew){
                        if(string.IsNullOrEmpty(item.Text) && item.Score != null)
                            item.Text = item.Score.Value >= 3 ? "I like it" : "I don''t like it";
                    }
                ';

            LoadOldItems
            {
                Take Score;
                Take 'Book.Title';
            }

            OldDataLoaded AppendTextIfScoreChanged
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                            || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                        .ToList();

                    foreach (var item in itemsWithModifiedScore)
                        item.newValue.Text += string.Format(" (changed from {0} to {1})",
                            item.oldValue.Score,
                            item.newValue.Score);
                ';

            OnSaveUpdate UpdateNumberOfReviews
                '
                    var bookIds = insertedNew.Select(review => review.BookID.Value)
                        .Concat(updatedNew.Select(review => review.BookID.Value))
                        .Concat(deletedIds.Select(review => review.BookID.Value))
                        .Distinct().ToList();

                    var numberOfReviews = _domRepository.Bookstore.Book.Query(bookIds)
                        .Select(book => new NumberOfReviews
                        {
                            ID = book.ID,
                            Count = _domRepository.Bookstore.Review.Subquery.Where(r => r.BookID == book.ID).Count()
                        })
                        .ToList();

                    var oldRecordIds = _domRepository.Bookstore.NumberOfReviews.Query(bookIds).Select(n => n.ID).ToList();
                    _domRepository.Bookstore.NumberOfReviews.Insert(numberOfReviews.Where(r => !oldRecordIds.Contains(r.ID)));
                    _domRepository.Bookstore.NumberOfReviews.Update(numberOfReviews.Where(r => oldRecordIds.Contains(r.ID)));
                ';

             OnSaveValidate DenyChangeOfLockedTitle
                '
                    var itemsWithModifiedScore = updatedOld
                        .Zip(updatedNew, (oldValue, newValue) => new { oldValue, newValue })
                        .Where(modified => modified.oldValue.Score == null && modified.newValue.Score != null
                            || modified.oldValue.Score != null && !modified.oldValue.Score.Equals(modified.newValue.Score))
                        .Where(modified => modified.oldValue.BookTitle.IndexOf("lock", StringComparison.InvariantCultureIgnoreCase) >= 0)
                        .FirstOrDefault();

                    if (itemsWithModifiedScore != null)
                        throw new Rhetos.UserException(string.Format(
                            "It is not allowed to modify score ({0} => {1}) for the book \"{2}\" because to contains \"lock\" in the title.",
                            itemsWithModifiedScore.oldValue.Score,
                            itemsWithModifiedScore.newValue.Score,
                            itemsWithModifiedScore.oldValue.BookTitle));
                ';
        }
    }

    Entity CodeTest{
        CodeTable;
    }

    SqlQueryable ComputedBookInfoNumberOfChapters
        "
            SELECT
                b.ID,
                NumberOfChapters = COUNT(bc.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.Chapter bc ON bc.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfChapters;

        ChangesOnLinkedItems Bookstore.Chapter.Book;
    }

    Entity BookInfoAboutChapters
    {
        ComputedFrom Bookstore.ComputedBookInfoNumberOfChapters
        {
            AllProperties;
            KeepSynchronized;
        }
    }
}