Module Bookstore
{
    Entity Book
    {
        ShortString Code { AutoCode; DefaultValue 'item => "BOOK+++"'; DenyUserEdit; }
        ShortString Title { Required; }
        Integer NumberOfPages;
        Reference Author Bookstore.Person;
    }

    Entity Person
    {
        ShortString Name;
    }

    Entity Chapter
    {
        Reference Book { Detail; }
        LongString Heading;


    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }

        ItemFilter ContainsLockMark 'item => item.Name.Contains("lock")';
		Lock ContainsLockMark '[Test] Name contains lock mark.';
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Entity Employee
    {
        ShortString Name;
        Integer VAT { Unique; Required; }
        ShortString Code { RegExMatch "\d{7,10}" "Code must have 7 to 10 digits."; }
        Integer TestPeriod { MinValue 1; MaxValue 12; }
        ShortString Iban { Required; Unique; MinLength 21; MaxLength 21; }

        DateTime WorkStarted { Required; }
        DateTime WorkFinished;

        ItemFilter workDidntStart 'item => item.WorkStarted == null';
		LockProperty WorkFinished.workDidntStart 'WorkFinished is locked if WorkStarted didnt start.';

        ItemFilter FinishBeforeStart 'employee => employee.WorkFinished != null && employee.WorkFinished.Value < employee.WorkStarted.Value';
        InvalidData FinishBeforeStart 'It is not allowed to enter a WorkFinished time before the WorkStarted time.';
    }

    Entity Manager
    {
        Extends Bookstore.Employee;

        LongString Bonuses;
    }

    Entity EducationalRecord
    {
        Date DateOfRecord;
        LongString Description;
        Deactivatable;

        DateTime Created { CreationTime; }

        Reference Employee{ Detail; }

        Logging { AllProperties; }
    }

    Entity Department
    {
        ShortString Code { Unique; Required; }
        LongString Description;

        DateTime Modified { ModificationTimeOf Bookstore.Department.Code; }
    }

    Entity EmployeeDepartment{
        Reference Employee {Detail;}
        Reference Department {Required;}

        UniqueMultiple 'Employee Department';
    }
}